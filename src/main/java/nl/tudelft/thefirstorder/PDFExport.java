package nl.tudelft.thefirstorder;

import nl.tudelft.thefirstorder.domain.*;

import java.io.*;
import java.util.Date;
import java.util.Set;
import java.util.Iterator;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

/**
 * Created by Martin on 10-5-2016.
 */
public class PDFExport {
        private static String FILE = "../FirstPdf.pdf";
        private static Font catFont = new Font(Font.FontFamily.COURIER, 18,
            Font.BOLD);
        private static Font redFont = new Font(Font.FontFamily.COURIER, 12,
            Font.NORMAL, BaseColor.RED);
        private static Font subFont = new Font(Font.FontFamily.COURIER, 16,
            Font.BOLD);
        private static Font smallBold = new Font(Font.FontFamily.COURIER, 12,
            Font.BOLD);

        public static void main(String[] args) {
            //Set<Cue> cues = new HashSet<Cue>();
            //Script script = new Script("test", cues);
            //Project project = new Project(null,null);
        }

        public static void export(Project project, HttpServletResponse resp) {
            Script script = project.getScript();
            try {
                Document document = new Document();
                ByteArrayOutputStream baosPDF = new ByteArrayOutputStream();
                PdfWriter docWriter = null;
                docWriter = PdfWriter.getInstance(document, baosPDF);
                PdfWriter.getInstance(document, new FileOutputStream(FILE));
                document.open();
                addMetaData(document, script);
                addTitlePage(document, script);
                addContent(document, script);
                document.close();
                docWriter.close();
                ServletOutputStream sos;
                sos = resp.getOutputStream();
                baosPDF.writeTo(sos);
                sos.flush();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // iText allows to add metadata to the PDF which can be viewed in your Adobe
        // Reader
        // under File -> Properties
        private static void addMetaData(Document document, Script script) {
            document.addTitle(script.getName());
            document.addSubject("Script");
            document.addKeywords("Script");
            document.addAuthor("The First Order");
            document.addCreator("The First Order");
        }

        private static void addTitlePage(Document document, Script script)
            throws DocumentException {
            Paragraph preface = new Paragraph();
            // We add one empty line
            addEmptyLine(preface, 1);
            // Lets write a big header
            preface.add(new Paragraph(script.getName(), catFont));

            addEmptyLine(preface, 1);
            // Will create: Report generated by: _name, _date
            preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
            addEmptyLine(preface, 3);
            preface.add(new Paragraph("",
                smallBold));

            addEmptyLine(preface, 8);

            preface.add(new Paragraph("",
                redFont));

            document.add(preface);
            // Start a new page
            document.newPage();
        }

        private static void addContent(Document document, Script script) throws DocumentException {
            Paragraph par = new Paragraph();
            Set<Cue> cues = script.getCues();
            PdfPTable table = new PdfPTable(4);
            PdfPTable cameratable = new PdfPTable(3);
            PdfPTable actiontable = new PdfPTable(2);

            PdfPCell c1 = new PdfPCell(new Phrase("No."));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Camera"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Camera Action"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Player"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Camera"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cameratable.addCell(c1);

            c1 = new PdfPCell(new Phrase("X Position"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cameratable.addCell(c1);

            c1 = new PdfPCell(new Phrase("Y Position"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cameratable.addCell(c1);

            c1 = new PdfPCell(new Phrase("Action"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            actiontable.addCell(c1);

            c1 = new PdfPCell(new Phrase("Duration"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            actiontable.addCell(c1);

            table.setHeaderRows(1);
            cameratable.setHeaderRows(1);
            actiontable.setHeaderRows(1);
            Iterator<Cue> cueIterator = cues.iterator();

            for(int i = 0; i<cues.size(); i++) {
                Cue cue = cueIterator.next();
                table.addCell(i + ".");
                table.addCell(cue.getCamera().getName());
                table.addCell(cue.getCameraAction().getName());
                table.addCell(cue.getPlayer().getName());
                Camera camera = cue.getCamera();
                cameratable.addCell(camera.getName());
                cameratable.addCell(camera.getX() + "");
                cameratable.addCell(camera.getY() + "");
                CameraAction action = cue.getCameraAction();
                actiontable.addCell(action.getName());
                actiontable.addCell(action.getDuration() + "");
            }

            par.add(new Paragraph("Cues"));
            addEmptyLine(par, 2);
            par.add(table);
            addEmptyLine(par, 3);
            par.add(new Paragraph("Cameras"));
            addEmptyLine(par, 2);
            par.add(cameratable);
            addEmptyLine(par, 3);
            par.add(new Paragraph("Camera Actions"));
            addEmptyLine(par, 2);
            par.add(cameratable);
            document.add(par);

        }

        private static void addEmptyLine(Paragraph paragraph, int number) {
            for (int i = 0; i < number; i++) {
                paragraph.add(new Paragraph(" "));
            }
        }
}
