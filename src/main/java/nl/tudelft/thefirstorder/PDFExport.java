package nl.tudelft.thefirstorder;

import nl.tudelft.thefirstorder.domain.Project;
import nl.tudelft.thefirstorder.domain.Script;
import nl.tudelft.thefirstorder.domain.Camera;
import nl.tudelft.thefirstorder.domain.CameraAction;
import nl.tudelft.thefirstorder.domain.Cue;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.Set;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

/**
 * Exports to a PDF file.
 */
public class PDFExport {
    private static String FILE = "../Script.pdf";
    private static Font catFont = new Font(Font.FontFamily.COURIER, 18,
        Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.COURIER, 12,
        Font.NORMAL, BaseColor.RED);
    private static Font smallBold = new Font(Font.FontFamily.COURIER, 12,
        Font.BOLD);

    /**
     * Export a project to pdf.
     * @param project the project
     * @param resp a http response to send the download to the browser
     */
    public void export(Project project, HttpServletResponse resp) {
        Script script = project.getScript();
        try {
            Document document = new Document();
            ByteArrayOutputStream baosPDF = new ByteArrayOutputStream();
            PdfWriter docWriter = null;
            docWriter = PdfWriter.getInstance(document, baosPDF);
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document, script);
            addTitlePage(document, script);
            addContent(document, script);
            document.close();
            docWriter.close();
            ServletOutputStream sos;
            sos = resp.getOutputStream();
            baosPDF.writeTo(sos);
            sos.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Add the meta data to the pdf.
     * @param document the document to which the data has to be added
     * @param script the script from which the data is exported
     */
    private void addMetaData(Document document, Script script) {
        document.addTitle(script.getName());
        document.addSubject("Script");
        document.addKeywords("Script");
        document.addAuthor("The First Order");
        document.addCreator("The First Order");
    }

    /**
     * Add a front page to the pdf.
     * @param document the documents to which the data has to be added
     * @param script the script from which the data is exported
     * @throws DocumentException if something wrong is added to the document
     */
    private void addTitlePage(Document document, Script script)
        throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(script.getName(), catFont));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name")
            + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph("",
            smallBold));
        addEmptyLine(preface, 8);
        preface.add(new Paragraph("",
            redFont));
        document.add(preface);
        document.newPage();
    }

    /**
     * Add the content to the pdf (The cues, cameras and actions).
     * @param document the document to which the content has to be added
     * @param script the script from which the content is exported
     * @throws DocumentException if something wrong is added to the document
     */
    private void addContent(Document document, Script script) throws DocumentException {
        PdfPTable table = new PdfPTable(4);

        PdfPCell c1 = new PdfPCell(new Phrase("No."));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Camera"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Camera Action"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Player"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        PdfPTable cameratable = new PdfPTable(3);

        c1 = new PdfPCell(new Phrase("Camera"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        cameratable.addCell(c1);

        c1 = new PdfPCell(new Phrase("X Position"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        cameratable.addCell(c1);

        c1 = new PdfPCell(new Phrase("Y Position"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        cameratable.addCell(c1);

        PdfPTable actiontable = new PdfPTable(2);

        c1 = new PdfPCell(new Phrase("Action"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        actiontable.addCell(c1);

        c1 = new PdfPCell(new Phrase("Duration"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        actiontable.addCell(c1);

        table.setHeaderRows(1);
        cameratable.setHeaderRows(1);
        actiontable.setHeaderRows(1);
        Set<Cue> cues = script.getCues();
        int index = 1;
        for (Cue cue : cues) {
            table.addCell(index + ".");
            table.addCell(cue.getCamera().getName());
            table.addCell(cue.getCameraAction().getName());
            table.addCell(cue.getPlayer().getName());
            Camera camera = cue.getCamera();
            cameratable.addCell(camera.getName());
            cameratable.addCell(camera.getX() + "");
            cameratable.addCell(camera.getY() + "");
            CameraAction action = cue.getCameraAction();
            actiontable.addCell(action.getName());
            actiontable.addCell(action.getDuration() + "");
            index++;
        }
        Paragraph par = new Paragraph();
        par.add(new Paragraph("Cues"));
        addEmptyLine(par, 2);
        par.add(table);
        addEmptyLine(par, 3);
        par.add(new Paragraph("Cameras"));
        addEmptyLine(par, 2);
        par.add(cameratable);
        addEmptyLine(par, 3);
        par.add(new Paragraph("Camera Actions"));
        addEmptyLine(par, 2);
        par.add(cameratable);
        document.add(par);

    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
